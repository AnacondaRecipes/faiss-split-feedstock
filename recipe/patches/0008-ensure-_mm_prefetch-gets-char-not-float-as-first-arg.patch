From 496a3026cf19ea6ec99c08914f8bca2ca74903fa Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Thu, 25 May 2023 15:26:05 +1100
Subject: [PATCH 8/8] ensure _mm_prefetch gets char, not float, as first arg

---
 faiss/utils/distances.cpp      | 10 ++++++----
 faiss/utils/distances_simd.cpp | 31 ++++++++++++++++++-------------
 2 files changed, 24 insertions(+), 17 deletions(-)

diff --git a/faiss/utils/distances.cpp b/faiss/utils/distances.cpp
index 037f86b7..038e1c4e 100644
--- a/faiss/utils/distances.cpp
+++ b/faiss/utils/distances.cpp
@@ -376,8 +376,9 @@ void exhaustive_L2sqr_blas<SingleBestResultHandler<CMax<float, int64_t>>>(
             for (int64_t i = i0; i < i1; i++) {
                 float* ip_line = ip_block.get() + (i - i0) * (j1 - j0);
 
-                _mm_prefetch(ip_line, _MM_HINT_NTA);
-                _mm_prefetch(ip_line + 16, _MM_HINT_NTA);
+                // MSVC enforces signature: _mm_prefetch(char const*, int)
+                _mm_prefetch((char const*)ip_line, _MM_HINT_NTA);
+                _mm_prefetch((char const*)(ip_line + 16), _MM_HINT_NTA);
 
                 // constant
                 const __m256 mul_minus2 = _mm256_set1_ps(-2);
@@ -404,8 +405,9 @@ void exhaustive_L2sqr_blas<SingleBestResultHandler<CMax<float, int64_t>>>(
 
                 // process 16 elements per loop
                 for (; idx_j < (count / 16) * 16; idx_j += 16, ip_line += 16) {
-                    _mm_prefetch(ip_line + 32, _MM_HINT_NTA);
-                    _mm_prefetch(ip_line + 48, _MM_HINT_NTA);
+                    // MSVC enforces signature: _mm_prefetch(char const*, int)
+                    _mm_prefetch((char const*)(ip_line + 32), _MM_HINT_NTA);
+                    _mm_prefetch((char const*)(ip_line + 48), _MM_HINT_NTA);
 
                     // load values for norms
                     const __m256 y_norm_0 =
diff --git a/faiss/utils/distances_simd.cpp b/faiss/utils/distances_simd.cpp
index ec757bd3..af9bc711 100644
--- a/faiss/utils/distances_simd.cpp
+++ b/faiss/utils/distances_simd.cpp
@@ -342,8 +342,9 @@ void fvec_op_ny_D4<ElementOpIP>(
 
     if (ny8 > 0) {
         // process 8 D4-vectors per loop.
-        _mm_prefetch(y, _MM_HINT_NTA);
-        _mm_prefetch(y + 16, _MM_HINT_NTA);
+        // MSVC enforces signature: _mm_prefetch(char const*, int)
+        _mm_prefetch((char const*)y, _MM_HINT_NTA);
+        _mm_prefetch((char const*)(y + 16), _MM_HINT_NTA);
 
         // m0 = (x[0], x[0], x[0], x[0], x[0], x[0], x[0], x[0])
         const __m256 m0 = _mm256_set1_ps(x[0]);
@@ -358,8 +359,9 @@ void fvec_op_ny_D4<ElementOpIP>(
                 _mm256_setr_epi32(0, 16, 32, 48, 64, 80, 96, 112);
 
         for (i = 0; i < ny8 * 8; i += 8) {
-            _mm_prefetch(y + 32, _MM_HINT_NTA);
-            _mm_prefetch(y + 48, _MM_HINT_NTA);
+            // MSVC enforces signature: _mm_prefetch(char const*, int)
+            _mm_prefetch((char const*)(y + 32), _MM_HINT_NTA);
+            _mm_prefetch((char const*)(y + 48), _MM_HINT_NTA);
 
             // collect dim 0 for 8 D4-vectors.
             // v0 = (y[(i * 8 + 0) * 4 + 0], ..., y[(i * 8 + 7) * 4 + 0])
@@ -420,8 +422,9 @@ void fvec_op_ny_D4<ElementOpL2>(
 
     if (ny8 > 0) {
         // process 8 D4-vectors per loop.
-        _mm_prefetch(y, _MM_HINT_NTA);
-        _mm_prefetch(y + 16, _MM_HINT_NTA);
+        // MSVC enforces signature: _mm_prefetch(char const*, int)
+        _mm_prefetch((char const*)y, _MM_HINT_NTA);
+        _mm_prefetch((char const*)(y + 16), _MM_HINT_NTA);
 
         // m0 = (x[0], x[0], x[0], x[0], x[0], x[0], x[0], x[0])
         const __m256 m0 = _mm256_set1_ps(x[0]);
@@ -436,8 +439,9 @@ void fvec_op_ny_D4<ElementOpL2>(
                 _mm256_setr_epi32(0, 16, 32, 48, 64, 80, 96, 112);
 
         for (i = 0; i < ny8 * 8; i += 8) {
-            _mm_prefetch(y + 32, _MM_HINT_NTA);
-            _mm_prefetch(y + 48, _MM_HINT_NTA);
+            // MSVC enforces signature: _mm_prefetch(char const*, int)
+            _mm_prefetch((char const*)(y + 32), _MM_HINT_NTA);
+            _mm_prefetch((char const*)(y + 48), _MM_HINT_NTA);
 
             // collect dim 0 for 8 D4-vectors.
             // v0 = (y[(i * 8 + 0) * 4 + 0], ..., y[(i * 8 + 7) * 4 + 0])
@@ -609,9 +613,9 @@ size_t fvec_L2sqr_ny_nearest_D4(
         __m256i current_indices = _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 6, 7);
         const __m256i indices_increment = _mm256_set1_epi32(8);
 
-        //
-        _mm_prefetch(y, _MM_HINT_NTA);
-        _mm_prefetch(y + 16, _MM_HINT_NTA);
+        // MSVC enforces signature: _mm_prefetch(char const*, int)
+        _mm_prefetch((char const*)y, _MM_HINT_NTA);
+        _mm_prefetch((char const*)(y + 16), _MM_HINT_NTA);
 
         // m0 = (x[0], x[0], x[0], x[0], x[0], x[0], x[0], x[0])
         const __m256 m0 = _mm256_set1_ps(x[0]);
@@ -626,8 +630,9 @@ size_t fvec_L2sqr_ny_nearest_D4(
                 _mm256_setr_epi32(0, 16, 32, 48, 64, 80, 96, 112);
 
         for (; i < ny8 * 8; i += 8) {
-            _mm_prefetch(y + 32, _MM_HINT_NTA);
-            _mm_prefetch(y + 48, _MM_HINT_NTA);
+            // MSVC enforces signature: _mm_prefetch(char const*, int)
+            _mm_prefetch((char const*)(y + 32), _MM_HINT_NTA);
+            _mm_prefetch((char const*)(y + 48), _MM_HINT_NTA);
 
             // collect dim 0 for 8 D4-vectors.
             // v0 = (y[(i * 8 + 0) * 4 + 0], ..., y[(i * 8 + 7) * 4 + 0])
